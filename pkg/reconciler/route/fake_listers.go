// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/kf/pkg/client/listers/kf/v1alpha1 (interfaces: RouteLister,RouteClaimLister,RouteNamespaceLister,RouteClaimNamespaceLister)

// Package route is a generated GoMock package.
package route

import (
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/google/kf/pkg/apis/kf/v1alpha1"
	v1alpha10 "github.com/google/kf/pkg/client/listers/kf/v1alpha1"
	labels "k8s.io/apimachinery/pkg/labels"
	reflect "reflect"
)

// FakeRouteLister is a mock of RouteLister interface
type FakeRouteLister struct {
	ctrl     *gomock.Controller
	recorder *FakeRouteListerMockRecorder
}

// FakeRouteListerMockRecorder is the mock recorder for FakeRouteLister
type FakeRouteListerMockRecorder struct {
	mock *FakeRouteLister
}

// NewFakeRouteLister creates a new mock instance
func NewFakeRouteLister(ctrl *gomock.Controller) *FakeRouteLister {
	mock := &FakeRouteLister{ctrl: ctrl}
	mock.recorder = &FakeRouteListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakeRouteLister) EXPECT() *FakeRouteListerMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *FakeRouteLister) List(arg0 labels.Selector) ([]*v1alpha1.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *FakeRouteListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeRouteLister)(nil).List), arg0)
}

// Routes mocks base method
func (m *FakeRouteLister) Routes(arg0 string) v1alpha10.RouteNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routes", arg0)
	ret0, _ := ret[0].(v1alpha10.RouteNamespaceLister)
	return ret0
}

// Routes indicates an expected call of Routes
func (mr *FakeRouteListerMockRecorder) Routes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routes", reflect.TypeOf((*FakeRouteLister)(nil).Routes), arg0)
}

// FakeRouteClaimLister is a mock of RouteClaimLister interface
type FakeRouteClaimLister struct {
	ctrl     *gomock.Controller
	recorder *FakeRouteClaimListerMockRecorder
}

// FakeRouteClaimListerMockRecorder is the mock recorder for FakeRouteClaimLister
type FakeRouteClaimListerMockRecorder struct {
	mock *FakeRouteClaimLister
}

// NewFakeRouteClaimLister creates a new mock instance
func NewFakeRouteClaimLister(ctrl *gomock.Controller) *FakeRouteClaimLister {
	mock := &FakeRouteClaimLister{ctrl: ctrl}
	mock.recorder = &FakeRouteClaimListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakeRouteClaimLister) EXPECT() *FakeRouteClaimListerMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *FakeRouteClaimLister) List(arg0 labels.Selector) ([]*v1alpha1.RouteClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.RouteClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *FakeRouteClaimListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeRouteClaimLister)(nil).List), arg0)
}

// RouteClaims mocks base method
func (m *FakeRouteClaimLister) RouteClaims(arg0 string) v1alpha10.RouteClaimNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteClaims", arg0)
	ret0, _ := ret[0].(v1alpha10.RouteClaimNamespaceLister)
	return ret0
}

// RouteClaims indicates an expected call of RouteClaims
func (mr *FakeRouteClaimListerMockRecorder) RouteClaims(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteClaims", reflect.TypeOf((*FakeRouteClaimLister)(nil).RouteClaims), arg0)
}

// FakeRouteNamespaceLister is a mock of RouteNamespaceLister interface
type FakeRouteNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *FakeRouteNamespaceListerMockRecorder
}

// FakeRouteNamespaceListerMockRecorder is the mock recorder for FakeRouteNamespaceLister
type FakeRouteNamespaceListerMockRecorder struct {
	mock *FakeRouteNamespaceLister
}

// NewFakeRouteNamespaceLister creates a new mock instance
func NewFakeRouteNamespaceLister(ctrl *gomock.Controller) *FakeRouteNamespaceLister {
	mock := &FakeRouteNamespaceLister{ctrl: ctrl}
	mock.recorder = &FakeRouteNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakeRouteNamespaceLister) EXPECT() *FakeRouteNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *FakeRouteNamespaceLister) Get(arg0 string) (*v1alpha1.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1alpha1.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *FakeRouteNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*FakeRouteNamespaceLister)(nil).Get), arg0)
}

// List mocks base method
func (m *FakeRouteNamespaceLister) List(arg0 labels.Selector) ([]*v1alpha1.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *FakeRouteNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeRouteNamespaceLister)(nil).List), arg0)
}

// FakeRouteClaimNamespaceLister is a mock of RouteClaimNamespaceLister interface
type FakeRouteClaimNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *FakeRouteClaimNamespaceListerMockRecorder
}

// FakeRouteClaimNamespaceListerMockRecorder is the mock recorder for FakeRouteClaimNamespaceLister
type FakeRouteClaimNamespaceListerMockRecorder struct {
	mock *FakeRouteClaimNamespaceLister
}

// NewFakeRouteClaimNamespaceLister creates a new mock instance
func NewFakeRouteClaimNamespaceLister(ctrl *gomock.Controller) *FakeRouteClaimNamespaceLister {
	mock := &FakeRouteClaimNamespaceLister{ctrl: ctrl}
	mock.recorder = &FakeRouteClaimNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakeRouteClaimNamespaceLister) EXPECT() *FakeRouteClaimNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *FakeRouteClaimNamespaceLister) Get(arg0 string) (*v1alpha1.RouteClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1alpha1.RouteClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *FakeRouteClaimNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*FakeRouteClaimNamespaceLister)(nil).Get), arg0)
}

// List mocks base method
func (m *FakeRouteClaimNamespaceLister) List(arg0 labels.Selector) ([]*v1alpha1.RouteClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.RouteClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *FakeRouteClaimNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeRouteClaimNamespaceLister)(nil).List), arg0)
}

// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "github.com/GoogleCloudPlatform/kf/pkg/apis/kf/v1alpha1"
	scheme "github.com/GoogleCloudPlatform/kf/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// CommandSetsGetter has a method to return a CommandSetInterface.
// A group's client should implement this interface.
type CommandSetsGetter interface {
	CommandSets(namespace string) CommandSetInterface
}

// CommandSetInterface has methods to work with CommandSet resources.
type CommandSetInterface interface {
	Create(*v1alpha1.CommandSet) (*v1alpha1.CommandSet, error)
	Update(*v1alpha1.CommandSet) (*v1alpha1.CommandSet, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.CommandSet, error)
	List(opts v1.ListOptions) (*v1alpha1.CommandSetList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.CommandSet, err error)
	CommandSetExpansion
}

// commandSets implements CommandSetInterface
type commandSets struct {
	client rest.Interface
	ns     string
}

// newCommandSets returns a CommandSets
func newCommandSets(c *KfV1alpha1Client, namespace string) *commandSets {
	return &commandSets{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the commandSet, and returns the corresponding commandSet object, and an error if there is any.
func (c *commandSets) Get(name string, options v1.GetOptions) (result *v1alpha1.CommandSet, err error) {
	result = &v1alpha1.CommandSet{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("commandsets").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of CommandSets that match those selectors.
func (c *commandSets) List(opts v1.ListOptions) (result *v1alpha1.CommandSetList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.CommandSetList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("commandsets").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested commandSets.
func (c *commandSets) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("commandsets").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a commandSet and creates it.  Returns the server's representation of the commandSet, and an error, if there is any.
func (c *commandSets) Create(commandSet *v1alpha1.CommandSet) (result *v1alpha1.CommandSet, err error) {
	result = &v1alpha1.CommandSet{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("commandsets").
		Body(commandSet).
		Do().
		Into(result)
	return
}

// Update takes the representation of a commandSet and updates it. Returns the server's representation of the commandSet, and an error, if there is any.
func (c *commandSets) Update(commandSet *v1alpha1.CommandSet) (result *v1alpha1.CommandSet, err error) {
	result = &v1alpha1.CommandSet{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("commandsets").
		Name(commandSet.Name).
		Body(commandSet).
		Do().
		Into(result)
	return
}

// Delete takes name of the commandSet and deletes it. Returns an error if one occurs.
func (c *commandSets) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("commandsets").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *commandSets) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("commandsets").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched commandSet.
func (c *commandSets) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.CommandSet, err error) {
	result = &v1alpha1.CommandSet{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("commandsets").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}

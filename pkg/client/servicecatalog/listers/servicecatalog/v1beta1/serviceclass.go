// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/poy/service-catalog/pkg/apis/servicecatalog/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceClassLister helps list ServiceClasses.
type ServiceClassLister interface {
	// List lists all ServiceClasses in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.ServiceClass, err error)
	// ServiceClasses returns an object that can list and get ServiceClasses.
	ServiceClasses(namespace string) ServiceClassNamespaceLister
	ServiceClassListerExpansion
}

// serviceClassLister implements the ServiceClassLister interface.
type serviceClassLister struct {
	indexer cache.Indexer
}

// NewServiceClassLister returns a new ServiceClassLister.
func NewServiceClassLister(indexer cache.Indexer) ServiceClassLister {
	return &serviceClassLister{indexer: indexer}
}

// List lists all ServiceClasses in the indexer.
func (s *serviceClassLister) List(selector labels.Selector) (ret []*v1beta1.ServiceClass, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ServiceClass))
	})
	return ret, err
}

// ServiceClasses returns an object that can list and get ServiceClasses.
func (s *serviceClassLister) ServiceClasses(namespace string) ServiceClassNamespaceLister {
	return serviceClassNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceClassNamespaceLister helps list and get ServiceClasses.
type ServiceClassNamespaceLister interface {
	// List lists all ServiceClasses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.ServiceClass, err error)
	// Get retrieves the ServiceClass from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.ServiceClass, error)
	ServiceClassNamespaceListerExpansion
}

// serviceClassNamespaceLister implements the ServiceClassNamespaceLister
// interface.
type serviceClassNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceClasses in the indexer for a given namespace.
func (s serviceClassNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ServiceClass, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ServiceClass))
	})
	return ret, err
}

// Get retrieves the ServiceClass from the indexer for a given namespace and name.
func (s serviceClassNamespaceLister) Get(name string) (*v1beta1.ServiceClass, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("serviceclass"), name)
	}
	return obj.(*v1beta1.ServiceClass), nil
}

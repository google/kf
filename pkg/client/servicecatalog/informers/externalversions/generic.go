// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	"fmt"

	v1beta1 "github.com/poy/service-catalog/pkg/apis/servicecatalog/v1beta1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() cache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() cache.GenericLister {
	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	// Group=servicecatalog.k8s.io, Version=v1beta1
	case v1beta1.SchemeGroupVersion.WithResource("clusterservicebrokers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1beta1().ClusterServiceBrokers().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("clusterserviceclasses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1beta1().ClusterServiceClasses().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("clusterserviceplans"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1beta1().ClusterServicePlans().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("servicebindings"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1beta1().ServiceBindings().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("servicebrokers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1beta1().ServiceBrokers().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("serviceclasses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1beta1().ServiceClasses().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("serviceinstances"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1beta1().ServiceInstances().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("serviceplans"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1beta1().ServicePlans().Informer()}, nil

	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}

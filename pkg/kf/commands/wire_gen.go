// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package commands

import (
	"context"
	"github.com/GoogleCloudPlatform/kf/pkg/kf"
	"github.com/GoogleCloudPlatform/kf/pkg/kf/buildpacks"
	"github.com/GoogleCloudPlatform/kf/pkg/kf/commands/apps"
	buildpacks2 "github.com/GoogleCloudPlatform/kf/pkg/kf/commands/buildpacks"
	"github.com/GoogleCloudPlatform/kf/pkg/kf/commands/config"
	servicebindings2 "github.com/GoogleCloudPlatform/kf/pkg/kf/commands/service-bindings"
	services2 "github.com/GoogleCloudPlatform/kf/pkg/kf/commands/services"
	"github.com/GoogleCloudPlatform/kf/pkg/kf/commands/utils"
	"github.com/GoogleCloudPlatform/kf/pkg/kf/service-bindings"
	"github.com/GoogleCloudPlatform/kf/pkg/kf/services"
	"github.com/buildpack/lifecycle/image"
	"github.com/buildpack/pack"
	config2 "github.com/buildpack/pack/config"
	"github.com/buildpack/pack/docker"
	"github.com/buildpack/pack/fs"
	"github.com/google/go-containerregistry/pkg/v1/remote"
	"github.com/knative/build/pkg/logs"
	"github.com/poy/kontext"
	"github.com/spf13/cobra"
)

import (
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
	_ "k8s.io/client-go/plugin/pkg/client/auth/oidc"
)

// Injectors from wire_injector.go:

func InjectPush(p *config.KfParams) *cobra.Command {
	servingV1alpha1Interface := config.GetServingClient(p)
	appLister := kf.NewLister(servingV1alpha1Interface)
	buildV1alpha1Interface := config.GetBuildClient(p)
	buildTailer := provideBuildTailer()
	logs := kf.NewLogTailer(buildV1alpha1Interface, servingV1alpha1Interface, buildTailer)
	pusher := kf.NewPusher(appLister, servingV1alpha1Interface, logs)
	srcImageBuilder := provideSrcImageBuilder()
	command := apps.NewPushCommand(p, pusher, srcImageBuilder)
	return command
}

func InjectDelete(p *config.KfParams) *cobra.Command {
	servingV1alpha1Interface := config.GetServingClient(p)
	deleter := kf.NewDeleter(servingV1alpha1Interface)
	command := apps.NewDeleteCommand(p, deleter)
	return command
}

func InjectApps(p *config.KfParams) *cobra.Command {
	servingV1alpha1Interface := config.GetServingClient(p)
	appLister := kf.NewLister(servingV1alpha1Interface)
	command := apps.NewAppsCommand(p, appLister)
	return command
}

func InjectProxy(p *config.KfParams) *cobra.Command {
	servingV1alpha1Interface := config.GetServingClient(p)
	appLister := kf.NewLister(servingV1alpha1Interface)
	kubernetesInterface := config.GetKubernetes(p)
	ingressLister := kf.NewIstioClient(kubernetesInterface)
	command := apps.NewProxyCommand(p, appLister, ingressLister)
	return command
}

func InjectEnv(p *config.KfParams) *cobra.Command {
	servingV1alpha1Interface := config.GetServingClient(p)
	appLister := kf.NewLister(servingV1alpha1Interface)
	environmentClient := kf.NewEnvironmentClient(appLister, servingV1alpha1Interface)
	command := apps.NewEnvCommand(p, environmentClient)
	return command
}

func InjectSetEnv(p *config.KfParams) *cobra.Command {
	servingV1alpha1Interface := config.GetServingClient(p)
	appLister := kf.NewLister(servingV1alpha1Interface)
	environmentClient := kf.NewEnvironmentClient(appLister, servingV1alpha1Interface)
	command := apps.NewSetEnvCommand(p, environmentClient)
	return command
}

func InjectUnsetEnv(p *config.KfParams) *cobra.Command {
	servingV1alpha1Interface := config.GetServingClient(p)
	appLister := kf.NewLister(servingV1alpha1Interface)
	environmentClient := kf.NewEnvironmentClient(appLister, servingV1alpha1Interface)
	command := apps.NewUnsetEnvCommand(p, environmentClient)
	return command
}

func InjectCreateService(p *config.KfParams) *cobra.Command {
	sClientFactory := config.GetSvcatApp(p)
	clientInterface := services.NewClient(sClientFactory)
	command := services2.NewCreateServiceCommand(p, clientInterface)
	return command
}

func InjectDeleteService(p *config.KfParams) *cobra.Command {
	sClientFactory := config.GetSvcatApp(p)
	clientInterface := services.NewClient(sClientFactory)
	command := services2.NewDeleteServiceCommand(p, clientInterface)
	return command
}

func InjectGetService(p *config.KfParams) *cobra.Command {
	sClientFactory := config.GetSvcatApp(p)
	clientInterface := services.NewClient(sClientFactory)
	command := services2.NewGetServiceCommand(p, clientInterface)
	return command
}

func InjectListServices(p *config.KfParams) *cobra.Command {
	sClientFactory := config.GetSvcatApp(p)
	clientInterface := services.NewClient(sClientFactory)
	command := services2.NewListServicesCommand(p, clientInterface)
	return command
}

func InjectMarketplace(p *config.KfParams) *cobra.Command {
	sClientFactory := config.GetSvcatApp(p)
	clientInterface := services.NewClient(sClientFactory)
	command := services2.NewMarketplaceCommand(p, clientInterface)
	return command
}

func InjectBindingService(p *config.KfParams) *cobra.Command {
	servicecatalogV1beta1Interface := config.GetServiceCatalogClient(p)
	clientInterface := config.GetSecretClient(p)
	servicebindingsClientInterface := servicebindings.NewClient(servicecatalogV1beta1Interface, clientInterface)
	command := servicebindings2.NewBindServiceCommand(p, servicebindingsClientInterface)
	return command
}

func InjectListBindings(p *config.KfParams) *cobra.Command {
	servicecatalogV1beta1Interface := config.GetServiceCatalogClient(p)
	clientInterface := config.GetSecretClient(p)
	servicebindingsClientInterface := servicebindings.NewClient(servicecatalogV1beta1Interface, clientInterface)
	command := servicebindings2.NewListBindingsCommand(p, servicebindingsClientInterface)
	return command
}

func InjectUnbindService(p *config.KfParams) *cobra.Command {
	servicecatalogV1beta1Interface := config.GetServiceCatalogClient(p)
	clientInterface := config.GetSecretClient(p)
	servicebindingsClientInterface := servicebindings.NewClient(servicecatalogV1beta1Interface, clientInterface)
	command := servicebindings2.NewUnbindServiceCommand(p, servicebindingsClientInterface)
	return command
}

func InjectVcapServices(p *config.KfParams) *cobra.Command {
	servicecatalogV1beta1Interface := config.GetServiceCatalogClient(p)
	clientInterface := config.GetSecretClient(p)
	servicebindingsClientInterface := servicebindings.NewClient(servicecatalogV1beta1Interface, clientInterface)
	command := servicebindings2.NewVcapServicesCommand(p, servicebindingsClientInterface)
	return command
}

func InjectBuildpacks(p *config.KfParams) *cobra.Command {
	buildV1alpha1Interface := config.GetBuildClient(p)
	remoteImageFetcher := provideRemoteImageFetcher()
	buildpackLister := buildpacks.NewBuildpackLister(buildV1alpha1Interface, remoteImageFetcher)
	command := buildpacks2.NewBuildpacks(p, buildpackLister)
	return command
}

func InjectUploadBuildpacks(p *config.KfParams) *cobra.Command {
	builderCreator := provideBuilderCreator()
	buildV1alpha1Interface := config.GetBuildClient(p)
	buildTemplateUploader := buildpacks.NewBuildTemplateUploader(buildV1alpha1Interface)
	command := buildpacks2.NewUploadBuildpacks(p, builderCreator, buildTemplateUploader)
	return command
}

func InjectOverrider(p *config.KfParams) utils.CommandOverrideFetcher {
	kfV1alpha1Interface := config.GetKfClient(p)
	buildV1alpha1Interface := config.GetBuildClient(p)
	buildTailer := provideBuildTailer()
	srcImageBuilder := provideSrcImageBuilder()
	commandOverrideFetcher := utils.NewCommandOverrideFetcher(kfV1alpha1Interface, buildV1alpha1Interface, buildTailer, srcImageBuilder, p)
	return commandOverrideFetcher
}

// wire_injector.go:

func provideSrcImageBuilder() apps.SrcImageBuilder {
	return apps.SrcImageBuilderFunc(kontext.BuildImage)
}

func provideBuildTailer() kf.BuildTailer {
	return kf.BuildTailerFunc(logs.Tail)
}

/////////////////
// Buildpacks //
///////////////
func provideRemoteImageFetcher() buildpacks.RemoteImageFetcher {
	return remote.Image
}

func provideBuilderCreator() buildpacks.BuilderCreator {
	return buildpacks.NewBuilderCreator(func(flags pack.CreateBuilderFlags) error {
		factory, err := image.NewFactory()
		if err != nil {
			return err
		}

		dockerClient, err := docker.New()
		if err != nil {
			return err
		}

		cfg, err := config2.NewDefault()
		if err != nil {
			return err
		}
		builderFactory := pack.BuilderFactory{
			FS:     &fs.FS{},
			Config: cfg,
			Fetcher: &pack.ImageFetcher{
				Factory: factory,
				Docker:  dockerClient,
			},
		}
		builderConfig, err := builderFactory.BuilderConfigFromFlags(context.Background(), flags)
		if err != nil {
			return err
		}

		if err := builderFactory.Create(builderConfig); err != nil {
			return err
		}

		return nil
	})
}

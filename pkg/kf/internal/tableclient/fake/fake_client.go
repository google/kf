// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/kf/pkg/kf/internal/tableclient/fake (interfaces: Interface)

// Package fake is a generated GoMock package.
package fake

import (
	gomock "github.com/golang/mock/gomock"
	tableclient "github.com/google/kf/pkg/kf/internal/tableclient"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v1beta1 "k8s.io/apimachinery/pkg/apis/meta/v1beta1"
	reflect "reflect"
)

// FakeInterface is a mock of Interface interface
type FakeInterface struct {
	ctrl     *gomock.Controller
	recorder *FakeInterfaceMockRecorder
}

// FakeInterfaceMockRecorder is the mock recorder for FakeInterface
type FakeInterfaceMockRecorder struct {
	mock *FakeInterface
}

// NewFakeInterface creates a new mock instance
func NewFakeInterface(ctrl *gomock.Controller) *FakeInterface {
	mock := &FakeInterface{ctrl: ctrl}
	mock.recorder = &FakeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakeInterface) EXPECT() *FakeInterfaceMockRecorder {
	return m.recorder
}

// Table mocks base method
func (m *FakeInterface) Table(arg0 tableclient.Type, arg1 string, arg2 v1.ListOptions) (*v1beta1.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1beta1.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Table indicates an expected call of Table
func (mr *FakeInterfaceMockRecorder) Table(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*FakeInterface)(nil).Table), arg0, arg1, arg2)
}

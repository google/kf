// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/kf/pkg/kf/buildpacks/fake (interfaces: BuildTemplateUploader)

// Package fake is a generated GoMock package.
package fake

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// FakeBuildTemplateUploader is a mock of BuildTemplateUploader interface
type FakeBuildTemplateUploader struct {
	ctrl     *gomock.Controller
	recorder *FakeBuildTemplateUploaderMockRecorder
}

// FakeBuildTemplateUploaderMockRecorder is the mock recorder for FakeBuildTemplateUploader
type FakeBuildTemplateUploaderMockRecorder struct {
	mock *FakeBuildTemplateUploader
}

// NewFakeBuildTemplateUploader creates a new mock instance
func NewFakeBuildTemplateUploader(ctrl *gomock.Controller) *FakeBuildTemplateUploader {
	mock := &FakeBuildTemplateUploader{ctrl: ctrl}
	mock.recorder = &FakeBuildTemplateUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakeBuildTemplateUploader) EXPECT() *FakeBuildTemplateUploaderMockRecorder {
	return m.recorder
}

// UploadBuildTemplate mocks base method
func (m *FakeBuildTemplateUploader) UploadBuildTemplate(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBuildTemplate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBuildTemplate indicates an expected call of UploadBuildTemplate
func (mr *FakeBuildTemplateUploaderMockRecorder) UploadBuildTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBuildTemplate", reflect.TypeOf((*FakeBuildTemplateUploader)(nil).UploadBuildTemplate), arg0)
}

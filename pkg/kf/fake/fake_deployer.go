// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/kf/pkg/kf/fake (interfaces: Deployer)

// Package fake is a generated GoMock package.
package fake

import (
	kf "github.com/GoogleCloudPlatform/kf/pkg/kf"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/knative/serving/pkg/apis/serving/v1alpha1"
	reflect "reflect"
)

// FakeDeployer is a mock of Deployer interface
type FakeDeployer struct {
	ctrl     *gomock.Controller
	recorder *FakeDeployerMockRecorder
}

// FakeDeployerMockRecorder is the mock recorder for FakeDeployer
type FakeDeployerMockRecorder struct {
	mock *FakeDeployer
}

// NewFakeDeployer creates a new mock instance
func NewFakeDeployer(ctrl *gomock.Controller) *FakeDeployer {
	mock := &FakeDeployer{ctrl: ctrl}
	mock.recorder = &FakeDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakeDeployer) EXPECT() *FakeDeployerMockRecorder {
	return m.recorder
}

// Deploy mocks base method
func (m *FakeDeployer) Deploy(arg0 v1alpha1.Service, arg1 ...kf.DeployOption) (*v1alpha1.Service, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deploy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy
func (mr *FakeDeployerMockRecorder) Deploy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*FakeDeployer)(nil).Deploy), varargs...)
}

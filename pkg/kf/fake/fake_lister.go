// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/kf/pkg/kf/fake (interfaces: Lister)

// Package fake is a generated GoMock package.
package fake

import (
	kf "github.com/GoogleCloudPlatform/kf/pkg/kf"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/knative/serving/pkg/apis/serving/v1alpha1"
	reflect "reflect"
)

// FakeLister is a mock of Lister interface
type FakeLister struct {
	ctrl     *gomock.Controller
	recorder *FakeListerMockRecorder
}

// FakeListerMockRecorder is the mock recorder for FakeLister
type FakeListerMockRecorder struct {
	mock *FakeLister
}

// NewFakeLister creates a new mock instance
func NewFakeLister(ctrl *gomock.Controller) *FakeLister {
	mock := &FakeLister{ctrl: ctrl}
	mock.recorder = &FakeListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakeLister) EXPECT() *FakeListerMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *FakeLister) List(arg0 ...kf.ListOption) ([]v1alpha1.Service, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]v1alpha1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *FakeListerMockRecorder) List(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeLister)(nil).List), arg0...)
}

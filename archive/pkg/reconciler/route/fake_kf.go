// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/kf/pkg/client/clientset/versioned (interfaces: Interface)

// Package route is a generated GoMock package.
package route

import (
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/google/kf/pkg/client/clientset/versioned/typed/kf/v1alpha1"
	discovery "k8s.io/client-go/discovery"
	reflect "reflect"
)

// FakeKfInterface is a mock of Interface interface
type FakeKfInterface struct {
	ctrl     *gomock.Controller
	recorder *FakeKfInterfaceMockRecorder
}

// FakeKfInterfaceMockRecorder is the mock recorder for FakeKfInterface
type FakeKfInterfaceMockRecorder struct {
	mock *FakeKfInterface
}

// NewFakeKfInterface creates a new mock instance
func NewFakeKfInterface(ctrl *gomock.Controller) *FakeKfInterface {
	mock := &FakeKfInterface{ctrl: ctrl}
	mock.recorder = &FakeKfInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakeKfInterface) EXPECT() *FakeKfInterfaceMockRecorder {
	return m.recorder
}

// Discovery mocks base method
func (m *FakeKfInterface) Discovery() discovery.DiscoveryInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discovery")
	ret0, _ := ret[0].(discovery.DiscoveryInterface)
	return ret0
}

// Discovery indicates an expected call of Discovery
func (mr *FakeKfInterfaceMockRecorder) Discovery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discovery", reflect.TypeOf((*FakeKfInterface)(nil).Discovery))
}

// Kf mocks base method
func (m *FakeKfInterface) Kf() v1alpha1.KfV1alpha1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kf")
	ret0, _ := ret[0].(v1alpha1.KfV1alpha1Interface)
	return ret0
}

// Kf indicates an expected call of Kf
func (mr *FakeKfInterfaceMockRecorder) Kf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kf", reflect.TypeOf((*FakeKfInterface)(nil).Kf))
}

// KfV1alpha1 mocks base method
func (m *FakeKfInterface) KfV1alpha1() v1alpha1.KfV1alpha1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KfV1alpha1")
	ret0, _ := ret[0].(v1alpha1.KfV1alpha1Interface)
	return ret0
}

// KfV1alpha1 indicates an expected call of KfV1alpha1
func (mr *FakeKfInterfaceMockRecorder) KfV1alpha1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KfV1alpha1", reflect.TypeOf((*FakeKfInterface)(nil).KfV1alpha1))
}

// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/kf/pkg/kf/service-bindings/fake (interfaces: ClientInterface)

// Package fake is a generated GoMock package.
package fake

import (
	gomock "github.com/golang/mock/gomock"
	service_bindings "github.com/google/kf/pkg/kf/service-bindings"
	v1beta1 "github.com/poy/service-catalog/pkg/apis/servicecatalog/v1beta1"
	reflect "reflect"
)

// FakeClientInterface is a mock of ClientInterface interface
type FakeClientInterface struct {
	ctrl     *gomock.Controller
	recorder *FakeClientInterfaceMockRecorder
}

// FakeClientInterfaceMockRecorder is the mock recorder for FakeClientInterface
type FakeClientInterfaceMockRecorder struct {
	mock *FakeClientInterface
}

// NewFakeClientInterface creates a new mock instance
func NewFakeClientInterface(ctrl *gomock.Controller) *FakeClientInterface {
	mock := &FakeClientInterface{ctrl: ctrl}
	mock.recorder = &FakeClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakeClientInterface) EXPECT() *FakeClientInterfaceMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *FakeClientInterface) List(arg0 ...service_bindings.ListOption) ([]v1beta1.ServiceBinding, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]v1beta1.ServiceBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *FakeClientInterfaceMockRecorder) List(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeClientInterface)(nil).List), arg0...)
}

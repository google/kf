// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/kf/pkg/kf/logs/fake (interfaces: Tailer)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	logs "github.com/google/kf/pkg/kf/logs"
	io "io"
	reflect "reflect"
)

// FakeTailer is a mock of Tailer interface
type FakeTailer struct {
	ctrl     *gomock.Controller
	recorder *FakeTailerMockRecorder
}

// FakeTailerMockRecorder is the mock recorder for FakeTailer
type FakeTailerMockRecorder struct {
	mock *FakeTailer
}

// NewFakeTailer creates a new mock instance
func NewFakeTailer(ctrl *gomock.Controller) *FakeTailer {
	mock := &FakeTailer{ctrl: ctrl}
	mock.recorder = &FakeTailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakeTailer) EXPECT() *FakeTailerMockRecorder {
	return m.recorder
}

// Tail mocks base method
func (m *FakeTailer) Tail(arg0 context.Context, arg1 string, arg2 io.Writer, arg3 ...logs.TailOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tail indicates an expected call of Tail
func (mr *FakeTailerMockRecorder) Tail(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tail", reflect.TypeOf((*FakeTailer)(nil).Tail), varargs...)
}

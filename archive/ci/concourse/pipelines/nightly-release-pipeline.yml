# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the License);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an AS IS BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
# Store these in your credential manager.
vars:

# git config vars
- &git_uri ((git_uri))
- &nightly_branch develop

# ci config vars
- &ci_git_uri ((git_uri))
- &ci_git_branch develop
- &ci_image_uri ((ci_image_uri))
- &service_account_json ((service_account_json))

# nightly and release build vars
- &release_service_account_json ((release_service_account_json))
- &release_project ((release_project))
- &release_bucket ((release_bucket))
- &ko_docker_release_repo ((ko_docker_release_repo))
- &ko_docker_repo ((ko_docker_repo))

# k8s config
- &gcp_project_id ((gcp_project_id))

# go config
- &go_proxy https://proxy.golang.org
- &go_sum_db sum.golang.org

# Terraform vars
- &tf_state_bucket ((tf_state_bucket))
- &tf_service_account ((service_account_json))
# ---- end vars ----

# Templates are YAML anchors that are referenced throughout the
# manifest with YAML aliases. This allows common components to
# be reused.
templates:
- &ci-image-source
  repository: *ci_image_uri
  username: _json_key
  password: *service_account_json

# ---- end templates ----

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.12.13
resources:
- name: kf-dev
  type: git
  source:
    uri: *git_uri
    branch: *nightly_branch
- name: terraform
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: *tf_state_bucket
      credentials: *service_account_json
    vars:
      project: *gcp_project_id
      release_channel: REGULAR
    env:
      GOOGLE_CREDENTIALS: *service_account_json
- name: nightly-build-trigger
  type: time
  source:
    start: 0:00
    stop: 1:00
    location: America/Los_Angeles
jobs:
- name: unit-test
  plan:
  - aggregate:
    - get: nightly-build-trigger
      trigger: true
    - get: kf-dev
      trigger: false
      params: {submodules: none}
  - task: unit
    timeout: 10m
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: kf-dev
      run:
        path: bash
        args:
        - -exc
        - |
          pushd kf-dev
            # Run unit tests
            ./hack/unit-test.sh
          popd
      params:
        GOPROXY: *go_proxy
        GOSUMDB: *go_sum_db
- name: check
  plan:
  - aggregate:
    - get: nightly-build-trigger
      trigger: true
    - get: kf-dev
      trigger: false
      params: {submodules: none}
  - task: check
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: kf-dev
      params:
        GOPROXY: *go_proxy
        GOSUMDB: *go_sum_db
      run:
        path: bash
        args:
        - -exc
        - |
          pushd kf-dev
            ./hack/tidy.sh
            ./hack/check-clean-git-state.sh

            ./hack/check-linters.sh
            ./hack/tidy.sh
            ./hack/check-clean-git-state.sh

            ./hack/go-generate.sh
            ./hack/tidy.sh
            ./hack/check-clean-git-state.sh

            ./hack/update-codegen.sh
            ./hack/tidy.sh
            ./hack/check-clean-git-state.sh

            ./hack/update-vendor-license.sh
            ./hack/tidy.sh
            ./hack/check-clean-git-state.sh

            ./hack/go-build.sh
            ./hack/tidy.sh
            ./hack/check-clean-git-state.sh

            ./hack/unit-test.sh
            ./hack/tidy.sh
            ./hack/check-clean-git-state.sh

            ./hack/build.sh
            ./hack/tidy.sh
            ./hack/check-clean-git-state.sh
          popd

- name: build-and-integrate
  serial: true
  plan:
  - aggregate:
    - get: kf-dev
      trigger: true
      passed: [unit-test, check]
      params: {submodules: none}
    - get: nightly-build-trigger
      trigger: true
      passed: [unit-test, check]
  - aggregate:
    - put: terraform
      params:
        terraform_source: kf-dev/ci/concourse/terraform
        env_name: nightly
        delete_on_failure: true
    - task: build
      attempts: 3
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: *ci-image-source
        params:
          SERVICE_ACCOUNT_JSON: *release_service_account_json
          GCP_PROJECT_ID: *release_project
          KO_DOCKER_REPO: *ko_docker_release_repo
          NIGHTLY: true
        inputs:
        - name: kf-dev
        outputs:
        - name: artifacts
        run:
          path: bash
          args:
          - -exc
          - |
            artifacts=`pwd`/artifacts
            pushd kf-dev
              # Generate license
              ./hack/update-vendor-license.sh $artifacts
              cp third_party/VENDOR-LICENSE $artifacts
              # Build CLI and controllers
              ./hack/build-release.sh $artifacts
            popd
  - task: integration
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: kf-dev
      - name: artifacts
      - name: terraform
      run:
        path: bash
        args:
        - -exc
        - |
          # Get TF outputs for GKE details
          project=`cat terraform/metadata | jq -r '.cluster_project'`
          cluster=`cat terraform/metadata | jq -r '.cluster_name'`
          region=`cat terraform/metadata | jq -r '.cluster_region'`
          # Login to Kubernetes
          set +x
          echo "$SERVICE_ACCOUNT_JSON" > key.json
          set -x
          echo Authenticating to kubernetes...
          gcloud auth activate-service-account --key-file key.json
          gcloud config set project "$project"
          gcloud container clusters get-credentials "$cluster" \
            --region "$region" \
            --project "$project"
          echo 'y' | gcloud auth configure-docker

          # Install SC
          kubectl apply --recursive --filename kf-dev/third_party/service-catalog/manifests/catalog/templates/

          # Install Tekton Pipelines
          kubectl apply --filename https://github.com/tektoncd/pipeline/releases/download/v0.8.0/release.yaml

          # Let SC and Build simmer for 30s
          sleep 30

          pushd kf-dev
            # Install Kf server-side components
            ./hack/ko-apply.sh

            # Setup Kf Secret and ConifgMap
            ./hack/create-gke-secret.sh

            # Run integration tests
            ./hack/integration-test.sh

            # Clean up
            ./hack/tidy.sh
            ./hack/check-clean-git-state.sh
          popd
      params:
        GOPROXY: *go_proxy
        GOSUMDB: *go_sum_db
        SERVICE_ACCOUNT_JSON: *service_account_json
        KO_DOCKER_REPO: *ko_docker_repo
  - task: publish
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      params:
        SERVICE_ACCOUNT_JSON: *release_service_account_json
        GCP_PROJECT_ID: *release_project
        RELEASE_BUCKET: *release_bucket
      inputs:
      - name: artifacts
      - name: kf-dev
      run:
        path: bash
        args:
        - -exc
        - |
          artifacts=`pwd`/artifacts
          ./kf-dev/hack/upload-release.sh $artifacts
  - try:
      put: terraform
      params:
        terraform_source: kf-dev/ci/concourse/terraform
        env_name: nightly
        action: destroy
      get_params:
        terraform_source: kf-dev/ci/concourse/terraform
        env_name: nightly
        action: destroy

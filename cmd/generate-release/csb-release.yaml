# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# This file contains the Cloud Build steps to genereate a Kf-owned CSB distribution.
#
# This is assumed to be ran from the root directory so that it has all the
# source code. Run it as follows:
#
# ```sh
# gcloud builds submit . \
# --config=cmd/generate-release/csb-release.yaml \
# --substitutions=_RELEASE_BUCKET=<GCP BUCKET>,_VERSION=<VERSION>
# ```
#
# *NOTE* replace `<GCP BUCKET>` with your own bucket, and `<VERSION>` with the
# desired version.

substitutions:
  _VERSION: '' # Required
  _CLOUDSDK_IMAGE: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
  _GOLANG_IMAGE: 'golang:1.16'
  _DOCKER_IMAGE: 'gcr.io/cloud-builders/docker'
  _RELEASE_BUCKET: '' # Required
  _CSB_SHA: '1f4b0b8d51409ff040786949ef407a235c3120c5'
  _GCP_BP_SHA: '3a52bb28c7144b4eeda49aa024ac3fa839e1e30c'

timeout: '1800s'

options:
  machineType: 'N1_HIGHCPU_8'

steps:
- id: check substitutions
  entrypoint: bash
  name: "${_CLOUDSDK_IMAGE}"
  args:
  - '-euc'
  - |
    if [ -z "${_VERSION}" ]; then
      echo "_VERSION is empty"
      exit 1
    fi
    if [ -z "${_RELEASE_BUCKET}" ]; then
      echo "_RELEASE_BUCKET is empty"
      exit 1
    fi

    echo '_VERSION="${_VERSION}"'
    echo '_RELEASE_BUCKET="${_RELEASE_BUCKET}"'
- id: prepare cloud-service-broker
  waitFor: ["check substitutions"]
  name: "${_GOLANG_IMAGE}"
  dir: "/workspace"
  entrypoint: 'bash'
  env:
  - "GOPROXY=https://proxy.golang.org"
  - "GOSUMDB=sum.golang.org"
  - "GO111MODULE=on"
  - "CGO_ENABLED=1"
  - "GOOS=linux"
  args:
  - '-euc'
  - |
    echo "Clone OSS Cloud Service Broker"
    if [ ! -d "cloud-service-broker" ]; then
        # cloud-service-broker directory does not exist, go clone it.
        git clone --single-branch --branch main https://github.com/cloudfoundry-incubator/cloud-service-broker.git cloud-service-broker
    fi

    pushd cloud-service-broker
        echo "Checking out csb sha ${_CSB_SHA}"
        git checkout ${_CSB_SHA}

        echo "Building CSB binary"
        go build -o ./build/cloud-service-broker

        echo "Generate license"
        go mod vendor
    popd

    echo "Generating third party licenses"
    go run third_party/forked/gomod-collector/*.go . cloud-service-broker > cloud-service-broker/VENDOR-LICENSE
- id: prepare csb-brokerpak-gcp
  waitFor: ["prepare cloud-service-broker"]
  name: "${_GOLANG_IMAGE}"
  dir: "/workspace"
  entrypoint: 'bash'
  env:
  - "GO111MODULE=on"
  - "GOPROXY=https://proxy.golang.org"
  - "GOSUMDB=sum.golang.org"
  args:
  - '-euc'
  - |
    echo "Clone csb-brokerpak-gcp"
    if [ ! -d "csb-brokerpak-gcp" ]; then
        # csb-brokerpak-gcp directory does not exist, go clone it.
        git clone --single-branch --branch main https://github.com/cloudfoundry-incubator/csb-brokerpak-gcp.git csb-brokerpak-gcp
    fi

    pushd csb-brokerpak-gcp
        echo "Checking out sha ${_GCP_BP_SHA}"
        git checkout ${_GCP_BP_SHA}
    popd

    echo "Building gcp-broker-pak binary"
    ./cloud-service-broker/build/cloud-service-broker pak build ./csb-brokerpak-gcp

    GCP_BP_RELEASE_NAME=gcp-services-${_GCP_BP_SHA}.brokerpak
    echo "move gcp-services-*.brokerpak to ./cloud-service-broker/"
    mv gcp-services-*.brokerpak ./cloud-service-broker/$${GCP_BP_RELEASE_NAME}

    # Copy the csb-brokerpak-gcp license to the aggregated license (cloud-service-broker/VENDOR-LICENSE)
    # because csb-brokerpak-gcp is included in the Kf CSB distribution, but it is not a direct dependency of
    # cloud-service-broker.
    echo "generating csb-brokerpak-gcp license"
    echo "===========================================================" >> cloud-service-broker/VENDOR-LICENSE
    echo "Module: https://github.com/cloudfoundry-incubator/csb-brokerpak-gcp ${_GCP_BP_SHA}" >> cloud-service-broker/VENDOR-LICENSE
    cat ./csb-brokerpak-gcp/LICENSE >> cloud-service-broker/VENDOR-LICENSE
- id: copy csb Dockerfile
  waitFor: ["prepare csb-brokerpak-gcp"]
  name: "${_CLOUDSDK_IMAGE}"
  dir: "/workspace/cloud-service-broker"
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    cp /workspace/cmd/generate-release/scripts/Dockerfile.csb ./Dockerfile
- id: build and push csb image
  waitFor: ["copy csb Dockerfile"]
  name: "${_DOCKER_IMAGE}"
  dir: "/workspace/cloud-service-broker"
  args: ['build', '--tag=gcr.io/$PROJECT_ID/csb:${_VERSION}', '.']
- id: upload csb artifacts
  waitFor: ["build and push csb image"]
  name: "${_CLOUDSDK_IMAGE}"
  dir: "/workspace/resources/csb/config"
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "Subsititue version on kf-csb-template.yaml"
    sed "s/VERSION_PLACEHOLDER/${_VERSION}/" kf-csb-template.yaml > kf-csb.yaml

    echo "Uploading kf-csb.yaml to the release bucket"
    gsutil cp kf-csb.yaml gs://${_RELEASE_BUCKET}/${_VERSION}/kf-csb.yaml

images: ['gcr.io/$PROJECT_ID/csb:${_VERSION}']

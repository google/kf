---
# Store these in your credential manager.
vars:
- &github_repo ((github_repo))
- &git_uri ((git_uri))
- &git_branch ((git_branch))
- &github_access_token ((github_access_token))
- &github_webhook_token ((github_webhook_token))
- &service_account_json ((service_account_json))
- &ci_image_uri ((ci_image_uri))
- &pr_comment ((pr_comment))
- &fly_user ((fly_user))
- &fly_password ((fly_password))
- &fly_target ((fly_target))
- &fly_url ((fly_url))
- &fly_team ((fly_team))

# Each task which runs go commands inherits these environment variables.
- &go_task_params
  GOPROXY: https://proxy.golang.org
  GOSUMDB: sum.golang.org
  SERVICE_ACCOUNT_JSON: *service_account_json

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

resources:
- name: src
  type: pull-request
  check_every: 1m
  webhook_token: *github_webhook_token
  source:
    repository: *github_repo
    access_token: *github_access_token
- name: ci-pipelines-src
  type: git
  source:
    branch: *git_branch
    uri: *git_uri
    paths:
    - ci/concourse/pipelines
- name: ci-image-src
  type: git
  source:
    branch: *git_branch
    uri: *git_uri
    paths:
    - ci/concourse/image
- name: ci-image
  type: docker-image
  source: &ci-image-source
    repository: *ci_image_uri
    username: _json_key
    password: *service_account_json

jobs:
- name: ci-image
  plan:
  - get: ci-image-src
    trigger: true
  - put: ci-image
    params:
      build: ci-image-src/ci/concourse/image
- name: pr-start
  plan:
  - get: src
    version: every
  - put: src
    params:
      path: src
      status: pending
      comment: *pr_comment
  - get: ci-pipelines-src
  - task: fly-set-pipeline
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: ci-pipelines-src
      params:
        FLY_TARGET: *fly_target
        FLY_USER: *fly_user
        FLY_PASSWORD: *fly_password
        FLY_URL: *fly_url
        FLY_TEAM: *fly_team
      run:
        dir: ci-pipelines-src
        path: sh
        args:
        - -exc
        - |
          wget "${FLY_URL}/api/v1/cli?arch=amd64&platform=linux" -O fly
          chmod +x ./fly
          set +x
          echo fly login -t "$FLY_TARGET" -c "$FLY_URL" -n "$FLY_TEAM"
          ./fly login -t "$FLY_TARGET" -c "$FLY_URL" -n "$FLY_TEAM" -u "$FLY_USER" -p "$FLY_PASSWORD"
          set -x
          ./fly -t "$FLY_TARGET" set-pipeline -p $(cat ../src/.git/resource/version.json | jq -r .pr) -c ci/concourse/pr-pipeline.yml --var=git_branch=$(cat ../src/.git/resource/metadata.json | jq -r .head_name)
    on_failure:
      put: src
      params:
        path: src
        status: failure

- name: pr-success
  plan:
  - get: src
    passed: [pr-start]
  - get: ci-pipelines-src
    passed: [pr-start]
  - task: fly-set-pipeline
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: ci-pipelines-src
      params:
        FLY_TARGET: *fly_target
        FLY_USER: *fly_user
        FLY_PASSWORD: *fly_password
        FLY_URL: *fly_url
        FLY_TEAM: *fly_team
      run:
        dir: ci-pipelines-src
        path: sh
        args:
        - -ec
        - |
          wget "${FLY_URL}/api/v1/cli?arch=amd64&platform=linux" -O fly
          chmod +x ./fly
          set +x
          echo fly login -t "$FLY_TARGET" -c "$FLY_URL" -n "$FLY_TEAM"
          ./fly login -t "$FLY_TARGET" -c "$FLY_URL" -n "$FLY_TEAM" -u "$FLY_USER" -p "$FLY_PASSWORD"
          set -x
          echo "y" | ./fly -t "$FLY_TARGET" destroy-pipeline -p $(cat ../src/.git/resource/version.json | jq -r .pr)
  - put: src
    params:
      path: src
      status: success

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the License);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an AS IS BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
# Store these in your credential manager.
vars:

# pull request vars
- &github_repo ((github_repo))
- &github_access_token ((github_access_token))
- &github_webhook_token ((github_webhook_token))

# ci config vars
- &ci_git_uri ((ci_git_uri))
- &ci_git_branch ((ci_git_branch))
- &ci_image_uri ((ci_image_uri))
- &fly_user ((fly_user))
- &fly_password ((fly_password))
- &fly_target ((fly_target))
- &fly_url ((fly_url))
- &fly_team ((fly_team))
- &service_account_json ((service_account_json))

# nightly build vars
- &release_service_account_json ((release_service_account_json))
- &ko_docker_release_repo ((ko_docker_release_repo))
- &release_bucket ((release_bucket))
- &cli_release_bucket ((cli_release_bucket))
- &gcp_project_id ((gcp_project_id))

# kf-release
- &release_major_version ((release_major_version))
- &release_minor_version ((release_minor_version))
- &release_patch_version ((release_patch_version))

# ---- end vars ----

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

resources:
- name: kf-master
  type: git
  source:
    uri: https://github.com/google/kf
    branch: master
- name: src
  type: pull-request
  check_every: 1m
  webhook_token: *github_webhook_token
  source:
    repository: *github_repo
    access_token: *github_access_token
- name: ci-pipelines-src
  type: git
  source:
    branch: *ci_git_branch
    uri: *ci_git_uri
    paths:
    - ci/concourse/pipelines
- name: ci-image-src
  type: git
  source:
    branch: *ci_git_branch
    uri: *ci_git_uri
    paths:
    - ci/concourse/image
- name: ci-image
  type: docker-image
  source: &ci-image-source
    repository: *ci_image_uri
    username: _json_key
    password: *service_account_json
- name: pr-cleanup-trigger
  type: time
  source:
    start: 0:00
    stop: 1:00
    location: America/Los_Angeles
- name: nightly-build-trigger
  type: time
  source:
    start: 0:00
    stop: 1:00
    location: America/Los_Angeles
- name: draft-github-release
  type: github-release
  source:
    owner: google
    repository: kf
    access_token: *github_access_token
    drafts: true
    pre_release: true

jobs:
# builds the ci image for later steps/other pipelines
- name: ci-image
  plan:
  - get: ci-image-src
    trigger: true
  - put: ci-image
    params:
      build: ci-image-src/ci/concourse/image

# creates a pipeline for each pr
- name: pr-start
  plan:
  - get: src
    version: every
    trigger: true
  - get: ci-pipelines-src
  - task: fly-set-pipeline
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: ci-pipelines-src
      - name: src
      params:
        FLY_TARGET: *fly_target
        FLY_USER: *fly_user
        FLY_PASSWORD: *fly_password
        FLY_URL: *fly_url
        FLY_TEAM: *fly_team
      run:
        dir: ci-pipelines-src
        path: sh
        args:
        - -exc
        - |
          # Download the fly executable for the given concourse server
          wget "${FLY_URL}/api/v1/cli?arch=amd64&platform=linux" -O fly
          chmod +x ./fly

          # Login
          set +x
          echo fly login...
          ./fly login\
            -t "$FLY_TARGET" \
            -c "$FLY_URL" \
            -n "$FLY_TEAM" \
            -u "$FLY_USER" \
            -p "$FLY_PASSWORD"
          set -x

          # Read PR number and branch from the PR resource
          metadata=../src/.git/resource/metadata.json
          jq_for() {
            jq -r ".[] | select(.name == \"$1\") | .value"
          }
          pr_number=$(cat "$metadata" | jq_for pr)
          git_branch=$(cat "$metadata" | jq_for head_name)

          # Create the pipeline
          ./fly -t "$FLY_TARGET" set-pipeline \
            -n \
            -p "$pr_number" \
            -c ci/concourse/pipelines/pr-pipeline.yml \
            -v git_branch="$git_branch" \
            -v pr_number="$pr_number"
    on_failure:
      put: src
      params:
        path: src
        status: failure

# destroys any leftover pr pipelines
- name: pr-cleanup
  plan:
  - get: pr-cleanup-trigger
    trigger: true
  - task: cleanup
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      params:
        FLY_TARGET: *fly_target
        FLY_USER: *fly_user
        FLY_PASSWORD: *fly_password
        FLY_URL: *fly_url
        FLY_TEAM: *fly_team
        GITHUB_REPO: *github_repo
        GITHUB_TOKEN: *github_access_token
      run:
        dir: ci-pipelines-src
        path: sh
        args:
        - -exc
        - |
          # Download the fly executable for the given concourse server
          wget "${FLY_URL}/api/v1/cli?arch=amd64&platform=linux" -O fly
          chmod +x ./fly

          # Login
          set +x
          echo fly login...
          ./fly login\
            -t "$FLY_TARGET" \
            -c "$FLY_URL" \
            -n "$FLY_TEAM" \
            -u "$FLY_USER" \
            -p "$FLY_PASSWORD"
          set -x

          # Query Github for open PR numbers
          prs=$(mktemp)
          set +x
          curl -H "Authorization: token ${GITHUB_TOKEN}" \
            -L "https://api.github.com/repos/${GITHUB_REPO}/pulls?state=open" \
            | jq .[].number \
            | sort \
            | uniq > $prs
          set -x

          # Query concourse for pipelines
          pipelines=$(mktemp)
          ./fly -t "$FLY_TARGET" pipelines \
            | awk '{print $1}' \
            | grep -v '^kf$' \
            | sort \
            | uniq > $pipelines

          # Create a list of pipelines which can be safely removed.
          extra=$(mktemp)
          comm -13 $prs $pipelines > $extra

          echo "removing the following pipelines as their PRs are no longer open:"
          cat $extra
          for extra_pipeline in $(cat $extra); do
            ./fly -t "$FLY_TARGET" destroy-pipeline -n -p $extra_pipeline
          done
          rm -f $prs $pipelines $extra

# nightly build of kf artifacts
- name: nightly-build
  plan:
  - aggregate:
    - get: kf-master
      trigger: false
    - get: nightly-build-trigger
      trigger: true
  - task: ko-resolve
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      params:
        SERVICE_ACCOUNT_JSON: *release_service_account_json
        GCP_PROJECT_ID: *gcp_project_id
        KO_DOCKER_REPO: *ko_docker_release_repo
        RELEASE_BUCKET: *release_bucket
        CLI_RELEASE_BUCKET: *cli_release_bucket
      inputs:
      - name: kf-master
      run:
        dir: kf-master
        path: hack/upload-release.sh

# Cut a new release of kf
# TODO: Consider semantic versioning resource:
# https://github.com/concourse/semver-resource#gcs-driver
# ATM, it seems like overkill and we should consider it when we are
# releasing in a more automated way.
- name: kf-release
  plan:
  - aggregate:
    - get: kf-master
      trigger: false
  - task: create-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      params:
        SERVICE_ACCOUNT_JSON: *release_service_account_json
        GCP_PROJECT_ID: *gcp_project_id
        KO_DOCKER_REPO: *ko_docker_release_repo
        RELEASE_BUCKET: *release_bucket
        CLI_RELEASE_BUCKET: *cli_release_bucket
        VERSION_MAJOR: *release_major_version
        VERSION_MINOR: *release_minor_version
        VERSION_PATCH: *release_patch_version
      inputs:
      - name: kf-master
      outputs:
      - name: github-release
      run:
        dir: kf-master
        path: sh
        args:
        - -exc
        - |
          # Build artifacts
          ./hack/build-release.sh ../github-release

          # Write release info
          tag=$(echo "v${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
          echo "${tag}" > ../github-release/tag
          echo "kf ${tag}" > ../github-release/name
          echo "Draft notes need to be filled in manually" > ../github-release/body
          echo "$(git rev-parse HEAD)" > ../github-release/commitish

  - put: draft-github-release
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      commitish: github-release/commitish
      globs:
      - github-release/release.yaml
      - github-release/bin/*

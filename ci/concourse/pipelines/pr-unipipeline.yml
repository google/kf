vars:
# ci config vars
- &ci_image_uri ((ci_image_uri))
- &ci_pool_git_key ((ci_pool_git_key))
- &ci_git_uri https://github.com/google/kf.git
- &ci_git_branch develop
- &service_account_json ((service_account_json))

# pull request vars
- &github_repo google/kf
- &github_access_token ((github_access_token))

# git config vars
- &git_uri ((git_uri))
- &nightly_branch develop

# Terraform vars
- &tf_state_bucket ((tf_state_bucket))
- &tf_service_account ((service_account_json))

# k8s config
- &gcp_project_id ((gcp_project_id))

# go config
- &go_proxy https://proxy.golang.org
- &go_sum_db sum.golang.org

# build vars
- &release_service_account_json ((release_service_account_json))
- &release_project ((release_project))
- &ko_docker_repo ((ko_docker_repo))

templates:
- &terraform-get
  get: terraform-output
  resource: terraform
  params:
    terraform_source: pr/ci/concourse/terraform
    env_name_file: gke-prs/name
    action: refresh

- &terraform-create
  put: terraform
  params:
    terraform_source: pr/ci/concourse/terraform
    env_name_file: gke-prs/name
    delete_on_failure: true

- &terraform-pre-destroy
  task: terraform-pre-destroy
  timeout: 30m
  config:
    platform: linux
    image_resource:
      type: docker-image
      source: *ci-image-source
    inputs:
    - name: pr
    - name: terraform-output
    params:
      SERVICE_ACCOUNT_JSON: *service_account_json
    run:
      path: bash
      args:
      - -exc
      - |
        project=`cat terraform-output/metadata | jq -r '.cluster_project'`
        network=`cat terraform-output/metadata | jq -r '.cluster_network'`
        set +x
        echo "$SERVICE_ACCOUNT_JSON" > key.json
        set -x
        gcloud config set project "$project"
        gcloud auth activate-service-account --key-file key.json
        pushd pr
          if [[ "$network" == "default" ]]; then
            echo "skipping cleanup: on default network"
          elif [[ "$network" == "null" ]]; then
            echo "skipping cleanup: on default network"
          else
            ./hack/terraform-pre-destroy.sh $network
          fi
        popd

- &terraform-destroy
  try:
    put: terraform
    params:
      terraform_source: pr/ci/concourse/terraform
      env_name_file: gke-prs/name
      action: destroy
    get_params:
      terraform_source: pr/ci/concourse/terraform
      env_name_file: gke-prs/name
      action: destroy

- &acquire-lock
   put: gke-prs
   params: {acquire: true}

- &release-lock
   put: gke-prs
   params: {release: gke-prs}

- &ci-image-source
  repository: *ci_image_uri
  username: _json_key
  password: *service_account_json

- &on-failure
  do:
  - put: pr
    params:
      path: pr
      status: FAILURE
  - *release-lock

- &on-success
  do:
  - *release-lock

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: m0pt0pmatt/github-pr-resource
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.12.13

resources:
- name: kf-dev
  type: git
  source:
    uri: *git_uri
    branch: *nightly_branch
- name: gke-prs
  type: pool
  source:
    uri: ssh://evanbrown@google.com@source.developers.google.com:2022/p/kf-source/r/kf-gke-pool
    branch: master
    pool: pr
    private_key: *ci_pool_git_key
- name: pr
  type: pull-request
  check_every: 10s
  source:
    repository: *github_repo
    access_token: *github_access_token
    labels: ["ok-to-test"]
- name: terraform
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: *tf_state_bucket
      credentials: *service_account_json
    vars:
      project: *gcp_project_id
      release_channel: REGULAR
    env:
      GOOGLE_CREDENTIALS: *service_account_json

jobs:
- name: reap
  plan:
  - *acquire-lock
  - get: pr
    resource: kf-dev
  - *terraform-destroy
  on_failure: *on-failure
  on_success:
    do:
    - *release-lock

- name: test
  on_failure: *on-failure
  on_success: *on-success
  plan:
  - get: pr
    trigger: true
  - *acquire-lock
  - put: pr
    params:
      path: pr
      status: PENDING
  - *terraform-get
  - *terraform-destroy
  - *terraform-pre-destroy
  - *terraform-destroy
  - *terraform-create
  - task: integration
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: pr
      - name: terraform
      run:
        path: bash
        args:
        - -exc
        - |
          # Get TF outputs for GKE details
          project=`cat terraform/metadata | jq -r '.cluster_project'`
          cluster=`cat terraform/metadata | jq -r '.cluster_name'`
          region=`cat terraform/metadata | jq -r '.cluster_region'`
          gcr_key=`cat terraform/metadata | jq -r '.gcr_key'`
          # Login to Kubernetes
          set +x
          echo "$SERVICE_ACCOUNT_JSON" > key.json
          set -x
          echo Authenticating to kubernetes...
          gcloud auth activate-service-account --key-file key.json
          gcloud config set project "$project"
          gcloud container clusters get-credentials "$cluster" \
            --region "$region" \
            --project "$project"
          echo 'y' | gcloud auth configure-docker

          # Install SC
          kubectl apply --recursive --filename pr/third_party/service-catalog/manifests/catalog/templates/

          # Install Tekton Pipelines
          kubectl apply --filename https://github.com/tektoncd/pipeline/releases/download/v0.8.0/release.yaml

          # Let SC and Build simmer for 30s
          sleep 30

          pushd pr
            # Install Kf server-side components
            ./hack/ko-apply.sh

            # Setup Kf Secret and ConifgMap
            ./hack/create-gke-secret.sh -k "$gcr_key"

            # Run integration tests
            ./hack/integration-test.sh

            # Clean up
            ./hack/tidy.sh
            ./hack/check-clean-git-state.sh
          popd
      params:
        GOPROXY: *go_proxy
        GOSUMDB: *go_sum_db
        SERVICE_ACCOUNT_JSON: *service_account_json
        KO_DOCKER_REPO: *ko_docker_repo
  - put: pr
    params:
      path: pr
      status: SUCCESS

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the License);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an AS IS BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
# Store these in your credential manager.
vars:

# pull request vars
# git src vars
- &github_repo ((github_repo))
- &git_uri {{git_uri}}
- &git_branch {{git_branch}}
- &pr_number {{pr_number}}

# ci config vars
- &ci_git_uri ((ci_git_uri))
- &ci_git_branch ((ci_git_branch))
- &ci_image_uri ((ci_image_uri))
- &github_access_token ((github_access_token))
- &service_account_json ((service_account_json))

# k8s config
- &gcp_project_id ((gcp_project_id))
- &k8s_cluster_name ((k8s_cluster_name))
- &k8s_cluster_zone ((k8s_cluster_zone))

# ko config https://github.com/google/ko
- &ko_docker_repo ((ko_docker_repo))

# go config
- &go_proxy https://proxy.golang.org
- &go_sum_db sum.golang.org

# Each task which runs go commands inherits these environment variables.
- &go_task_params
- &on_failure
  task: set-failure
  file: ci-src/ci/concourse/tasks/set-status.yml
  params:
    GITHUB_REPO_OWNER: *github_repo
    GITHUB_STATUS_VALUE: failure
    GITHUB_TOKEN: *github_access_token

resources:
- name: src
  type: git
  source:
    branch: *git_branch
    uri: *git_uri
- name: ci-src
  type: git
  source:
    branch: *ci_git_branch
    uri: *ci_git_uri
    path: ci/concourse
- name: ci-image
  type: docker-image
  source: &ci-image-source
    repository: *ci_image_uri
    username: _json_key
    password: *service_account_json

jobs:
- name: pending
  plan:
  - get: src
    trigger: true
  - get: ci-src
  - task: set-pending
    file: ci-src/ci/concourse/tasks/set-status.yml
    params:
      GITHUB_REPO_OWNER: *github_repo
      GITHUB_STATUS_VALUE: pending
      GITHUB_TOKEN: *github_access_token
    on_failure: *on_failure
- name: check
  plan:
  - get: src
    trigger: true
    passed: [pending]
  - get: ci-image
  - get: ci-src
  - task: check
    timeout: 2h30m
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: src
      params:
        GOPROXY: *go_proxy
        GOSUMDB: *go_sum_db
        SERVICE_ACCOUNT_JSON: *service_account_json
      run:
        dir: src
        path: bash
        args:
        - -exc
        - |
          hack/check-linters.sh
          hack/check-go-generate.sh
          hack/check-code-generator.sh
    on_failure: *on_failure
- name: build
  plan:
  - get: src
    passed: [pending]
    trigger: true
  - get: ci-image
  - get: ci-src
  - task: build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: src
      params:
        GOPROXY: *go_proxy
        GOSUMDB: *go_sum_db
        SERVICE_ACCOUNT_JSON: *service_account_json
      run:
        dir: src
        path: bash
        args:
        - -exc
        - |
          hack/build.sh
    on_failure: *on_failure
- name: apply
  plan:
  - get: src
    passed: [pending]
    trigger: true
  - get: ci-image
  - get: ci-src
  - task: test
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: src
      - name: ci-src
      params:
        KO_DOCKER_REPO: *ko_docker_repo
        SERVICE_ACCOUNT_JSON: *service_account_json
        GCP_PROJECT_ID: *gcp_project_id
        K8S_CLUSTER_NAME: *k8s_cluster_name
        K8S_CLUSTER_ZONE: *k8s_cluster_zone
      run:
        dir: src
        path: bash
        args:
        - -exc
        - |
          # Login to Kubernetes
          set +x
          /bin/echo "$SERVICE_ACCOUNT_JSON" > key.json
          set -x
          /bin/echo Authenticating to kubernetes...
          gcloud auth activate-service-account --key-file key.json
          gcloud config set project "$GCP_PROJECT_ID"
          gcloud container clusters get-credentials "$K8S_CLUSTER_NAME" \
            --zone "$K8S_CLUSTER_ZONE" \
            --project "$GCP_PROJECT_ID"
          /bin/echo 'y' | gcloud auth configure-docker

          # Update server-side components of kf
          ko apply -f config

    on_failure: *on_failure
- name: test
  plan:
  - get: src
    passed: [pending, apply]
    trigger: true
  - get: ci-image
  - get: ci-src
  - task: unit-tests
    timeout: 10m
    file: ci-src/ci/concourse/tasks/set-status.yml
    params:
      GOPROXY: *go_proxy
      GOSUMDB: *go_sum_db
  - task: integration-tests
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: *ci-image-source
      inputs:
      - name: src
      - name: ci-src
      params:
        GOPROXY: *go_proxy
        GOSUMDB: *go_sum_db
        SERVICE_ACCOUNT_JSON: *service_account_json
        GCP_PROJECT_ID: *gcp_project_id
        K8S_CLUSTER_NAME: *k8s_cluster_name
        K8S_CLUSTER_ZONE: *k8s_cluster_zone
      run:
        dir: src
        path: bash
        args:
        - -exc
        - |
          # Login to Kubernetes
          set +x
          /bin/echo "$SERVICE_ACCOUNT_JSON" > key.json
          set -x
          /bin/echo Authenticating to kubernetes...
          gcloud auth activate-service-account --key-file key.json
          gcloud config set project "$GCP_PROJECT_ID"
          gcloud container clusters get-credentials "$K8S_CLUSTER_NAME" \
            --zone "$K8S_CLUSTER_ZONE" \
            --project "$GCP_PROJECT_ID"
          /bin/echo 'y' | gcloud auth configure-docker

          # Run integration tests
          hack/integration-test.sh
    on_failure: *on_failure
- name: success
  plan:
  - get: ci-src
  - get: src
    trigger: true
    passed: [check, build, apply, test]
  - task: set-ok
    file: ci-src/ci/concourse/tasks/set-status.yml
    params:
      GITHUB_REPO_OWNER: *github_repo
      GITHUB_STATUS_VALUE: success
      GITHUB_TOKEN: *github_access_token
    on_failure: *on_failure

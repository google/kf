# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the License);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an AS IS BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: build.knative.dev/v1alpha1
kind: ClusterBuildTemplate
metadata:
  name: buildpack
spec:
  parameters:
  - name: IMAGE
    description: The image you wish to create. For example, "repo/example", or "example.com/repo/image"
  - name: RUN_IMAGE
    description: The run image buildpacks will use as the base for IMAGE.
    default: packs/run:v3alpha2
  - name: BUILDER_IMAGE
    description: The builder image (must include v3 lifecycle and compatible buildpacks).
    default: gcr.io/kf-releases/buildpack-builder:latest
  - name: USE_CRED_HELPERS
    description: Use Docker credential helpers for Googles GCR, Amazons ECR, or Microsofts ACR.
    default: 'true'
  - name: CACHE
    description: The name of the persistent app cache volume
    default: empty-dir
  - name: BUILDPACK
    description: When set, skip the detect step and use the given buildpack.
    default: ''
  steps:
  - name: info
    image: github.com/google/kf/cmd/setup-buildpack-build
    imagePullPolicy: Always
    args:
    - "--app=/workspace"
    - "--image=${IMAGE}"
    - "--run-image=${RUN_IMAGE}"
    - "--builder-image=${BUILDER_IMAGE}"
    - "--use-cred-helpers=${USE_CRED_HELPERS}"
    - "--cache=${CACHE}"
    - "--buildpack=${BUILDPACK}"
    volumeMounts:
    - name: "layers-dir"
      mountPath: /layers
    - name: "${CACHE}"
      mountPath: /cache

  - name: detect
    image: ${BUILDER_IMAGE}
    imagePullPolicy: Always
    command: ["/bin/bash"]
    args:
    - -c
    - |
      if [[ -z "${BUILDPACK}" ]]; then
        /lifecycle/detector \
          -app=/workspace \
          -group=/layers/group.toml \
          -plan=/layers/plan.toml
      else
        touch /layers/plan.toml
        echo -e "[[buildpacks]]\nid = \"${BUILDPACK}\"\nversion = \"latest\"\n" > /layers/group.toml
      fi
    volumeMounts:
    - name: "${CACHE}"
      mountPath: /cache
    - name: "layers-dir"
      mountPath: /layers

  - name: restore
    image: ${BUILDER_IMAGE}
    imagePullPolicy: Always
    command: ["/lifecycle/restorer"]
    args:
    - "-group=/layers/group.toml"
    - "-layers=/layers"
    - "-path=/cache"
    volumeMounts:
    - name: "${CACHE}"
      mountPath: /cache
    - name: "layers-dir"
      mountPath: /layers

  - name: analyze
    image: ${BUILDER_IMAGE}
    imagePullPolicy: Always
    command: ["/lifecycle/analyzer"]
    args:
    - -layers=/layers
    - -helpers=${USE_CRED_HELPERS}
    - -group=/layers/group.toml
    - ${IMAGE}
    volumeMounts:
    - name: "${CACHE}"
      mountPath: /cache
    - name: "layers-dir"
      mountPath: /layers

  - name: build
    image: ${BUILDER_IMAGE}
    imagePullPolicy: Always
    command: ["/lifecycle/builder"]
    args:
    - -layers=/layers
    - -app=/workspace
    - -group=/layers/group.toml
    - -plan=/layers/plan.toml
    volumeMounts:
    - name: "${CACHE}"
      mountPath: /cache
    - name: "layers-dir"
      mountPath: /layers

  - name: export
    image: ${BUILDER_IMAGE}
    imagePullPolicy: Always
    command: ["/lifecycle/exporter"]
    args:
    - -layers=/layers
    - -helpers=${USE_CRED_HELPERS}
    - -app=/workspace
    - -image=${RUN_IMAGE}
    - -group=/layers/group.toml
    - ${IMAGE}
    volumeMounts:
    - name: "${CACHE}"
      mountPath: /cache
    - name: "layers-dir"
      mountPath: /layers

  - name: cache
    image: ${BUILDER_IMAGE}
    imagePullPolicy: Always
    command: ["/lifecycle/cacher"]
    args:
    - "-layers=/layers"
    - "-group=/layers/group.toml"
    - "-path=/cache"
    volumeMounts:
    - name: "${CACHE}"
      mountPath: /cache
    - name: "layers-dir"
      mountPath: /layers

  volumes:
  - name: empty-dir
    emptyDir: {}
  - name: layers-dir
    emptyDir: {}

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the License);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an AS IS BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: build.knative.dev/v1alpha1
kind: ClusterBuildTemplate
metadata:
  name: buildpack
spec:
  parameters:
  - name: IMAGE
    description: The image you wish to create. For example, "repo/example", or "example.com/repo/image"
  - name: RUN_IMAGE
    description: The run image buildpacks will use as the base for IMAGE.
    default: packs/run:v3alpha2
  - name: BUILDER_IMAGE
    description: The builder image (must include v3 lifecycle and compatible buildpacks).
    default: gcr.io/kf-releases/buildpack-builder:latest
  - name: USE_CRED_HELPERS
    description: Use Docker credential helpers for Googles GCR, Amazons ECR, or Microsofts ACR.
    default: 'true'
  - name: CACHE
    description: The name of the persistent app cache volume
    default: empty-dir
  - name: USER_ID
    description: The user ID of the builder image user
    default: '1000'
  - name: GROUP_ID
    description: The group ID of the builder image user
    default: '1000'
  - name: BUILDPACK
    description: When set, skip the detect step and use the given buildpack.
    default: ''
  steps:
  - args:
    - -c
    - |
      chown -R "${USER_ID}:${GROUP_ID}" "/builder/home" \
        && chown -R "${USER_ID}:${GROUP_ID}" /layers \
        && chown -R "${USER_ID}:${GROUP_ID}" /workspace
    command:
    - /bin/sh
    image: alpine
    imagePullPolicy: Always
    name: prepare
    resources: {}
    volumeMounts:
    - mountPath: /layers
      name: ${CACHE}
  - args:
    - -c
    - |
      if [[ -z "${BUILDPACK}" ]]; then
        /lifecycle/detector \
          -app=/workspace \
          -group=/layers/group.toml \
          -plan=/layers/plan.toml
      else
        touch /layers/plan.toml
        echo -e "[[buildpacks]]\nid = \"${BUILDPACK}\"\nversion = \"latest\"\n" > /layers/group.toml
      fi
    command:
    - /bin/bash
    image: ${BUILDER_IMAGE}
    imagePullPolicy: Always
    name: detect
    resources: {}
    volumeMounts:
    - mountPath: /layers
      name: ${CACHE}
  - args:
    - -layers=/layers
    - -helpers=${USE_CRED_HELPERS}
    - -group=/layers/group.toml
    - ${IMAGE}
    command:
    - /lifecycle/analyzer
    image: ${BUILDER_IMAGE}
    imagePullPolicy: Always
    name: analyze
    resources: {}
    volumeMounts:
    - mountPath: /layers
      name: ${CACHE}
  - args:
    - -layers=/layers
    - -app=/workspace
    - -group=/layers/group.toml
    - -plan=/layers/plan.toml
    command:
    - /lifecycle/builder
    image: ${BUILDER_IMAGE}
    imagePullPolicy: Always
    name: build
    resources: {}
    volumeMounts:
    - mountPath: /layers
      name: ${CACHE}
  - args:
    - -layers=/layers
    - -helpers=${USE_CRED_HELPERS}
    - -app=/workspace
    - -image=${RUN_IMAGE}
    - -group=/layers/group.toml
    - ${IMAGE}
    command:
    - /lifecycle/exporter
    image: ${BUILDER_IMAGE}
    imagePullPolicy: Always
    name: export
    resources: {}
    volumeMounts:
    - mountPath: /layers
      name: ${CACHE}
  volumes:
  - name: empty-dir

#!/usr/bin/env bash

echo "---> Java buildpack"

set -eo pipefail
set -x

env_dir="$2/env"
layers_dir="$1"
plan_path="$3"

jdk_url="https://cdn.azul.com/zulu/bin/zulu8.28.0.1-jdk8.0.163-linux_x64.tar.gz"
jdk_version="1.8.0_163"

maven_url="https://apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz"
maven_version="3.5.4"

# Load user-provided build-time environment variables
if compgen -G "$env_dir/*" > /dev/null; then
  for var in "$env_dir"/*; do
    declare "$(basename "$var")=$(<"$var")"
  done
fi

echo "---> Installing JDK"

# If it doesn't exist locally, create a JDK cache layer
# This makes JDK available to subsequent buildpacks as well.
if [[ -f $layers_dir/jdk.toml ]]; then
  cached_jdk_url=$(cat "$layers_dir/jdk.toml" | yj -t | jq -r .metadata.url 2>/dev/null || echo 'JDK TOML parsing failed')
fi
if [[ $jdk_url != $cached_jdk_url ]] ; then
  rm -rf "$layers_dir"/jdk
  mkdir -p "$layers_dir"/jdk/env
  wget -q -O - "$jdk_url" | tar pxz -C "$layers_dir"/jdk --strip-components=1
  echo "launch = true" > "$layers_dir"/jdk.toml
  echo "build = true" >> "$layers_dir"/jdk.toml
  echo "cache = true" >> "$layers_dir"/jdk.toml
  echo -e "[metadata]\n  version = \"$jdk_version\"\n  url = \"$jdk_url\"" >> "$layers_dir"/jdk.toml

  echo "$layers_dir"/jdk > "$layers_dir"/jdk/env/JAVA_HOME
  if [[ -z $LD_LIBRARY_PATH ]]; then
    echo "$JAVA_HOME/jre/lib/amd64/server" > $layers_dir/jdk/env/LD_LIBRARY_PATH
  else
    echo "$JAVA_HOME/jre/lib/amd64/server:$LD_LIBRARY_PATH" > $layers_dir/jdk/env/LD_LIBRARY_PATH
  fi

  mkdir -p $layers_dir/jdk/profile.d
  cat << EOF > $layers_dir/jdk/profile.d/jdk.sh
export JAVA_HOME=$layers_dir/jdk
if [[ -z \$LD_LIBRARY_PATH ]]; then
  export LD_LIBRARY_PATH="\$JAVA_HOME/jre/lib/amd64/server"
else
  export LD_LIBRARY_PATH="\$JAVA_HOME/jre/lib/amd64/server:$LD_LIBRARY_PATH"
fi
EOF
fi
# Set env variables to make jdk accessible
for var in "$layers_dir"/jdk/env/*; do
  declare "$(basename "$var")=$(<"$var")"
done
export PATH=$layers_dir/jdk/bin:$PATH


if [[ ! -d $layers_dir/maven_m2 ]]; then
  mkdir -p $layers_dir/maven_m2
  echo "cache = true" > $layers_dir/maven_m2.toml
fi
ln -s $layers_dir/maven_m2 $HOME/.m2
MAVEN_OPTS="${MAVEN_OPTS:-"-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"}"

if [[ -x mvnw ]]; then
  echo "---> Running Maven Wrapper"
  ./mvnw clean install -B -DskipTests
else
  if [[ -f $layers_dir/maven.toml ]]; then
    cached_maven_url=$(cat "$layers_dir/maven.toml" | yj -t | jq -r .metadata.url 2>/dev/null || echo 'Maven TOML parsing failed')
  fi
  if [[ $maven_url != $cached_maven_url ]] ; then
    echo "---> Installing Maven"
    maven_dir="$layers_dir/maven"
    rm -rf "$maven_dir"
    mkdir -p "$maven_dir"
    wget -q -O - "$maven_url" | tar pxz -C "$maven_dir" --strip-components=1
    echo "launch = false" > "$layers_dir"/maven.toml
    echo "build = true" >> "$layers_dir"/maven.toml
    echo "cache = true" >> "$layers_dir"/maven.toml
    echo -e "[metadata]\n  version = \"$maven_version\"\n  url = \"$maven_url\"" >> "$layers_dir"/maven.toml
  fi
  export PATH=$PATH:$layers_dir/maven/bin

  echo "---> Running Maven"
  mvn clean install -B -DskipTests
fi

# Set default start command
for jarFile in $(find target -maxdepth 1 -name "*.jar" -type f); do
  echo "processes = [{ type = \"web\", command = \"java -jar $jarFile\"}]" > "$layers_dir/launch.toml"
  break;
done
